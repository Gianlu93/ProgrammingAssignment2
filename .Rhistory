# Assignment: Caching the Inverse of a matrix
# Author: Gianlu93 (Github account username)
# Code adapted from examples: makeVector & cachemean
# makeCacheMatrix creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
mat_inverse <- NULL
set <- function(y){
x <<- y
mat_inverse <<- NULL
}
get <- function() x
set_inverse <- function(matrix) mat <<- matrix
get_inverse <- function() mat
list(set = set, get = get,
set_inverse = setmatrix, get_inverse = get_inverse)
}
# CacheSolve solves for the inverse of the matrix created by the function above.
# Should the inverse already have been computed, CacheSolve will obtain it from
# the cache thus reducing overall computing time.
CacheSolve <- function(x, ...){
mat_inverse <- x$getmatrix()
if(!is.null(mat_inverse)){
message("get cached data")
return(mat_inverse)
}
data <- x$get()
mat_inverse <- solve(data, ...)
x$setmatrix(mat_inverse)
mat_inverse
}
# Sample code to run (Note: we presume we are dealing with a square matrix)
matrix1 <- matrix(seq(1:4), nrow =2, ncol =2) #square matrix with 4 elements
my_data <- makeCacheMatrix(matrix1)
CacheSolve(my_data)
# Repeat the operation to verify the message "get cached data"
CacheSolve(my_data)
# Assignment: Caching the Inverse of a matrix
# Author: Gianlu93 (Github account username)
# Code adapted from examples: makeVector & cachemean
# makeCacheMatrix creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
mat_inverse <- NULL
set <- function(y){
x <<- y
mat_inverse <<- NULL
}
get <- function() x
set_inverse <- function(matrix) mat_inverse <<- matrix
get_inverse <- function() mat_inverse
list(set = set, get = get,
set_inverse = setmatrix, get_inverse = get_inverse)
}
# CacheSolve solves for the inverse of the matrix created by the function above.
# Should the inverse already have been computed, CacheSolve will obtain it from
# the cache thus reducing overall computing time.
CacheSolve <- function(x, ...){
mat_inverse <- x$getmatrix()
if(!is.null(mat_inverse)){
message("get cached data")
return(mat_inverse)
}
data <- x$get()
mat_inverse <- solve(data, ...)
x$setmatrix(mat_inverse)
mat_inverse
}
# Sample code to run (Note: we presume we are dealing with a square matrix)
matrix1 <- matrix(seq(1:4), nrow =2, ncol =2) #square matrix with 4 elements
my_data <- makeCacheMatrix(matrix1)
CacheSolve(my_data)
# Repeat the operation to verify the message "get cached data"
CacheSolve(my_data)
# Assignment: Caching the Inverse of a matrix
# Author: Gianlu93 (Github account username)
# Code adapted from examples: makeVector & cachemean
# makeCacheMatrix creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()){
mat <- NULL
set <- function(y){
x <<- y
mat <<- NULL
}
get <- function() x
setmatrix <- function(matrix) mat <<- matrix
getmatrix <- function() mat
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
# CacheSolve solves for the inverse of the matrix created by the function above.
# Should the inverse already have been computed, CacheSolve will obtain it from
# the cache thus reducing overall computing time.
CacheSolve <- function(x, ...){
mat <- x$getmatrix()
if(!is.null(mat)){
message("get cached data")
return(mat)
}
data <- x$get()
mat <- solve(data, ...)
x$setmatrix(mat)
mat
}
# Sample code to run (Note: we presume we are dealing with a square matrix)
matrix1 <- matrix(seq(1:4), nrow =2, ncol =2) #square matrix with 4 elements
my_data <- makeCacheMatrix(matrix1)
CacheSolve(my_data)
# Repeat the operation to verify the message "get cached data"
CacheSolve(my_data)
